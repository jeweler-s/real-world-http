# 10장. 보안: 브라우저를 보호하는 HTTP의 기능

# OS 접근 공격

## 멜웨어

- 컴퓨터에 위협을 주는 소프트웨어
- 사용자가 의도하지 않아도 실행되도록 계획

### 종류

- `컴퓨터 바이러스` : 다른 실행 파일 등을 감염시켜 감염된 파일이 실행되면 다른 프로그램에도 자기를 복제해서 증가
- `웜` : 적극적으로 네트워크 장비나 OS의 보안 취약점을 공격

### 공격 방법

- `키 로거` : 키 입력을 기록해 암호를 훔치는 방식
- `트로이 목마` : 외부에서 원격 조작하기 위해 백도어 설치

⇒ DDoS 공격의 발판이 될 수 있음

# 브라우저 타겟 공격

## 공격 대상

- 브라우저 취약점
- 브라우저가 열람하는 서비스에서 보내는 HTML
- 자바스크립트의 취약점

## 크로스 사이트 스크립팅(XSS)

- 데이터에 악의적인 스크립트를 포함하여 서버에 전송하는 행위

### 대응 방안

- 템플릿 엔진, 플레이스 홀더를 통한 안전한 출력
- 적절한 라이브러리 사용을 통한 개발자 실수 감소
- `X-XSS-Protection` 헤더
    - HTML 인라인에서 스크립트 태그를 사용하는 경우 등 명확하게 수상한 패턴 감지, 파이어폭스 제외 여러 브라우저가 지원
- `Content-Security-Policy` 헤더
    - 웹사이트에 필요한 기능을 서버에서 설정하여 자바스크립트의 예상치 못한 동작 방지
    - 브라우저가 실시하는 검사, 웹사이트의 동작 방해 가능
    - `upgrade-insecure-requests` 지시문 사용 시 리소스 요청 시 `https://` 로 요청
- `Content-Security-Policy-Report-Only` 헤더
    - `Content-Security-Policy` 헤더와 동일하지만 웹사이트의 동작 방해 X

## 중간자 공격(MITM)

- 프록시 서버가 통신 중계 시 통신 내용을 빼내 정보가 누설되는 공격
- 인터넷 접속 경로로 패킷을 도청당해 통신 내용이 새어나감

### 대응 방안

- HTTPS 사용
    - HSTS 사용 (HTTPS 사용 유도, `Strict-Transport-Security`  헤더 사용)
- HPKP : 디지털 서명을 위한 공개 키를 이용한 인증서 검증

## 세션 하이재킹

- 웹 서비스의 세션 토큰을 훔쳐 웹사이트에 로그인하는 공격
    - 세션 고정화 공격
    - 쿠키 인젝션

### 대응 방안

- HTTPS 사용
- `Set-Cookie: httpOnly, secure` 응답 헤더 활용

## 사이트 간 요청 위조(CSRF)

- 본인이 의도하지 않은 서버 요청을 관계 없는 페이지나 사이트에서 보내게 하는 등 피해자에게 의도하지 않는 조작을 하게 만드는 공격

### 대응 방안

- HTTP 스테리트리스성 제한
- 쿠키에 SameSite 속성 부여 : 요청 보내기 전 페이지가 같은 사이트에 없는 한 쿠키를 보내지 않음

## 클릭재킹

- IFRAME을 이용한 악의적인 페이지 조작 유도 공격

### 대응 방안

- `X-Frame-Options` 헤더 : 페이지가 IFRAME 내에서 이용되는 것을 방지

## 리스트형 계정 해킹

- 보안에 취약한 웹 서버가 해킹당해 사용자 ID 및 일반 텍스트로 저장된 비밀번호 유출 시 같은 이메일 주소와 비밀번호를 돌려쓰는 사용자의 보안은 무효가 됨

### 대응 방안

- 2단계 인증
- 지오로케이션
- 시간당 액세스 제한

# CORS

## 요청 타입

- `Simple cross-origin request` : 단순 요청
- `actual request` : 프리플라이트 요청 수반
- `Preflighted Request` : 실제 통신 전 권한을 확인하려 보내는 요청, 일정 기간 캐싱하여 통신을 생략할 수 있음

## Simple Request 조건

- HTTP 요청 메서드가 단순 메서드 (GET, POST, HEAD)
- 헤더가 모두 심플 헤더 (사용자 정의 헤더 X)
- Content-Type을 포함하는 경우, 아래에 해당
    - `application/x-www-form-urlencoded`
    - `multipart/form-data`
    - `text-plan`

## 프리플라이트 요청

### 클라이언트의 요청 전송 시 추가 헤더

아래 헤더 추가하여 `OPTIONS` 메서드로 전송

- `Access-Control-Request-Method` 요청 헤더: 통신 희망 메서드 지정
- `Access-Control-Request-Headers` 요청 헤더 : 허용 희망 헤더 나열
- `Origin` 응답 헤더 : 통신 출처 웹 페이지 도메인 이름 지정

### 서버 응답 시 추가 헤더

- `Access-Control-Allow-Origin` 응답 헤더 : 통신 허용할 Origin명
- `Access-Control-Allow-Method` 응답 헤더 : 대상 URL에 허용될 메서드명

# 웹 광고 및 보안

- 방문한 URL 목록을 가져와 사용자의 취향 추정

## 측정 방식

- `쿠키 기반 측정 도구` : 사용자마다 부여된 고유한 ID로 3개월 이상의 전환 성과까지 가져올 수 있음
- `핑거 프린트 방식` : 단말기에서 조회 가능한 모든 정보를 통해 사용자를 세밀하게 카테고리화, 사용자 특정 불가

## 서드파티 쿠키

- 광고 등의 용도로 외부 서비스에서 읽을 수 있는 쿠키를 삽입해 사이트를 넘어 행동 추적을 가능하게 해주는 쿠키
- 사용자가 인식하지 않는 곳에서 추적되어 개인 정보 보호 문제 존재

## 쿠키 대체 수단

- HTML5의 각종 스토리지
- ETag
- 임의로 생성한 이미지
- 기타 플래시나 실버라이트, 자바 애플릿 등의 저장 영역

## 구글 애널리틱스

- 웹사이트에 자바스크립트 설치하여 코드를 사용해 퍼스트파티 쿠키로서 ID 정보를 쿠키에 저장
- 설치된 도메인 내 사용자의 움직임 파악하여 목적 달성 가능

# 추가로 알게 된 내용

## 프리플라이트 요청

- "preflighted" request는 위에서 논의한 ["simple requests"](https://developer.mozilla.org/ko/docs/Web/HTTP/CORS#%EB%8B%A8%EC%88%9C_%EC%9A%94%EC%B2%ADsimple_requests) 와는 달리, 먼저 `[OPTIONS](https://developer.mozilla.org/ko/docs/Web/HTTP/Methods/OPTIONS)` 메서드를 통해 다른 도메인의 리소스로 HTTP 요청을 보내 실제 요청이 전송하기에 안전한지 확인

[교차 출처 리소스 공유 (CORS) - HTTP | MDN](https://developer.mozilla.org/ko/docs/Web/HTTP/CORS)
