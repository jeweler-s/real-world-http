# 4장. HTTP/1.1의 신택스: 고속화와 안정성을 추구한 확장

# HTTP/1.1 변경사항

- 통신 고속화 (`Keep-Alive`가 기본적으로 유효)
- TLS에 의한 암호화 통신 지원
- 새 메서드 추가
- 프로토콜 업그레이드
- 이름을 사용한 가상 호스트 지원
- 크기를 사전에 알 수 없는 콘텐츠의 청크 전송 인코딩 지원

# 통신 고속화

> Connection: Keep-Alive
> 
- 연속된 요청에는 접속을 다시 이용하여 핸드셰이크 줄임 ⇒ 응답 시간 개선
- 지속 시간은 클라이언트와 서버 모두 가지고 있음

> Connection: Close
> 
- 클라이언트나 서버 중 한 쪽이 위 헤더를 사용해 접속을 끊거나 타임아웃 될 때까지 연결 유지

# 파이프라이닝

- 최초의 요청이 완료되기 전에 다음 요청을 보내는 기술
- `Keep-Alive` 이용을 전제로 함
- 현재 기본으로 해당 옵션을 활성화한 브라우저는 거의 없음 (오페라, iOS 5 이후 사파리)
- HTTP/2에서 스트림으로 개편됨

<aside>
💡 **HOL 블로킹(Head Of Line Blocking)**
요청 받은 순서대로 응답 시, 응답 생성에 시간이 걸리거나 크기가 큰 파일을 반환하는 처리가 있으면 다른 응답에 영향을 주는 현상

</aside>

# 전송 계층 보안(TLS)

- HTTP 이외에 SMTPS 등 기존 프로토콜의 버전업에도 이용
- 공통 키 방식과 공개 키 방식을 조합하여 사용
    - 통신마다 한 번만 사용되는 공통 키 생성하여 공개 키 방식을 사용해 통신 상대에게 키 전달
    - 이후 공통 키로 고속 암호화
- 흔히 `SSL`이라 부르는 용어는 모두 `TLS`에 해당됨

## 통신 절차

![https://brunch.co.kr/@swimjiy/47](https://prod-files-secure.s3.us-west-2.amazonaws.com/31151178-2abf-4285-b27d-d78331d3f581/e077408a-2b6a-4281-a306-a3116ccafd9f/Untitled.png)

https://brunch.co.kr/@swimjiy/47

- `1단계` : SSL 서버 인증서 취득
- `2단계` : 서버 인증서의 신뢰성 확인
- `3단계` : 공통 키를 작성해 인증서 내의 공개 키로 암호화
    - 공개 키 암호 사용, 키 교환 전용 알고리즘 사용 중 어느 쪽을 사용할 지는 Client/Server Hello 협상 시 결정
- `4단계` : 암호화된 키의 복호화
- `5단계` : 복호화된 키로 통신 ⇒ 공통 키 암호 방식 알고리즘 사용

<aside>
💡 현재 책정중인 TLS 1.3 버전에서는 공개 키 암호를 이용한 키 교환은 폐지될 예정

</aside>

## 통신의 고속화

- TLS 1.2에는 `세션 재개 기능`이 있어 최초의 핸드셰이크에서 전에 사용하던 세션 ID를 보내면 이후의 키 교환 생략

## 암호화 스위트

- 아래 조합을 리스트화해 관리하고 서버/클라이언트에서 공통으로 사용할 수 있는 것을 선택할 수 있도록 만든 시스템
    - 키 교환 방법, 메시지 암호화, 메시지 서명 방식 등

## 프로토콜 선택

- TLS에는 애플리케이션 계층 프로토콜을 선택하는 확장 기능 보유
- TLS 사용 시 프록시의 간섭을 받지 않고, 프로토콜 버전을 사전에 서버와 조정함으로써 호환성 없는 프로토콜도 이용할 수 있음

# 메서드 변경사항

- PUT, DELETE 필수 메서드 지정 (XMLHttpRequest 사용하여 요청 가능)
- OPTION, TRACE, CONNECT 메서드 추가
    - `OPTION` : 서버가 받아들일 수 있는 메서드 목록 반환
    - `TRACE(TRACK)` : 요청 헤더와 바디 리턴 (보안상의 이유로 미사용)
    - `CONNECT` : HTTP 프로토콜상에 다른 프로토콜의 패킷을 흘림

# 프로토콜 업그레이드

- HTTP 1.1부터 HTTP 이외의 프로토콜로 업그레이드 가능
    - HTTP → TLS
    - HTTP → 웹소켓을 사용한 양방향 통신
    - HTTP → HTTP/2 (h2c)
- HTTP/2에서 삭제됨

# 가상 호스트 지원

- 하나의 웹 서버로 여러 웹 서비스를 운영하는 방법 지원
- 클라이언트가 `Host` 헤더에 요청을 보내고자 하는 서버 이름을 기술할 의무가 생김

# 청크

> Transfer-Encoding: chunked
> 
- 전체를 한꺼번에 전송하지 않고 작게 나눠 전송하여 응답 속도 개선
- 청크 설정 시 `Content-Length` 헤더를 포함해서는 안 됨
- `0` 전송 시 청크 전송이 모두 끝났다는 뜻
- 청크 메시지 끝에 헤더 추가 가능
    - Transfer-Encoding
    - Content-Length
    - Trailer

# `curl` 주요 옵션

- `-T` : 파일 전송
