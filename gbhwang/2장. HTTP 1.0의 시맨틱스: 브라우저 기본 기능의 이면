# 2장. HTTP/1.0의 시맨틱스: 브라우저 기본 기능의 이면

# 폼 전송

## Content-Type에 따른 구분

- `application/x-www-form-urlencoded`  : 일반 폼 전송
- `multipart/form-data` : 파일 첨부

# 콘텐츠 협상(**Content Negotiation)**

- 사용자에게 가장 알맞는 형태의 리소스를 받을 수 있도록, 리소스를 어떤 형태로 받을지 정할 수 있도록하게 하는 메커니즘
- 헤더를 이용하여 진행
    
    
    | 요청 헤더 | 응답 | 협상 대상 | 예시 |
    | --- | --- | --- | --- |
    | Accept | Content-Type 헤더 | MIME 타입 
    (파일 종류) | Accept: text/hjtml,*/*;q=0.8 |
    | Accept-Language | Content-Language 헤더,
    HTML 태그 | 표시 언어 | Accept-Language: en-US,en;q=0.8,ko;q=0.6 |
    | Accept-Charset | Content-Type 헤더 | 문자의 문자셋 | Accept-Charset: utf-8,*;q=0.3
    Content-Type: text/html; charset=UTF-8 |
    | Accept-Encoding | Content-Encoding 헤더 | 바디 압축 | Accept-Encoding: deflate, gzip
    Content-Encoding: gzip |
- `q`는 품질 계수로 0 ~ 1 수치로 설정, 우선 순위를 나타냄

## 콘텐츠 압축

### 주요 알고리즘

- `br` : 브로틀리 (구글)
- `compress` : 유닉스에 탑재된 커맨드
- `gzip` : GZIP 커맨드와 같은 압축 알고리즘
- `identity` : 무압축을 선언하는 예약어

### 압축 알고리즘 예시

예시 단어 : 경기도안양시안양동안양아트센터

**1) 슬라이드 사전**

> 경기도안양시[3글자 앞에서 2글자 복사]동[3글자 앞에서 2글자 복사]아트센터
> 

**2) 공유 사전**

사전에 `경기도 안양`을 공유 사전에 저장

> [4글자 앞에서 2글자 복사]도[5글자 앞에서 2글자 복사]시[3글자 앞에서 2글자 복사]동[3글자 앞에서 2글자 복사]아트센터
> 

# 쿠키

- 웹사이트의 정보를 브라우저 쪽에 저장하는 작은 파일
- 서버에서 `Set-Cookie` 응답 헤더를 통하여 클라이언트에 쿠키 저장 요청
- 데이터베이스를 대체할 수는 없으며, 사라지더라도 문제가 없는 정보나 서버 정보로 복원할 수 있는 자료를 저장하는 용도에 적합
- HTTP 통신에서 평문으로 전송

## 쿠키 제한 속성

- `Expires`, `Max-Age` : 쿠키 수명 설정
- `Domain` : 클라이언트에서 쿠키를 전송할 대상 서버, 생략 시 쿠키 발행 서버
- `Path` : 클라이언트에서 쿠키를 전송할 대상 서버의 경로, 생략 시 쿠키 발행 서버 경로
- `Secure` : https 사용 시에만 클라이언트에서 서버로 쿠키 전송
- `HttpOnly` : 자바스크립트 엔진으로부터 쿠키를 감출 수 있음

# 인증

## BASIC 인증

> base64(유저명:패스워드)
> 
- 유저명과 패스워드를 BASE64로 인코딩하는 인증 방식

## Digest 인증

- 해시 함수를 이용한 인증 방식

## 쿠키를 사용한 세션 관리

- 폼 전송과 쿠키를 사용한 인증 방식

# 프록시

- HTTP 통신을 중계, 또는 각종 부가 기능 구현
- `X-Forwarded-For` : 프록시의 주소가 아닌 클라이언트의 원래 주소를 전달하기 위한 헤더

## 프록시와 게이트웨이의 차이

- 프록시 : 전송 외 필요에 따라 컨텐츠를 수정하거나 서버 대신 응답
- 게이트웨이 : 통신 내용 전송, 통신 내용 수정 불가, 클라이언트가 중간에 존재하는 것을 알아채서는 안됨

# 캐시

- 콘텐츠가 변경되지 않을 때 로컬에 저장된 파일을 재사용함으로써 다운로드 횟수를 줄이기 위한 기법
- `GET`, `HEAD` 메서드 외 기본적으로 캐싱되지 않음

## Cache-Control 헤더

- 리로드를 억제하기 위한 시스템으로, `Expires` 헤더보다 우선 순위 높음
- 클라이언트는 아래 속성을 통하여 서버에 요청 가능
    - `no-cache` : 요청한 콘텐츠가 이미 존재해도 재요청 (`Pragma: no-cache`와 동일)
    - `no-store` : 캐시하지 않음, 프록시 서버에 캐시를 삭제하도록 요청
- 서버는 아래 속성을 통하여 캐시 제어 가능
    - `max-age=n` : 캐시의 유효기간을 초단위로 설정
    - `no-cache` : 캐시가 유효한지 매번 서버에 문의, `max-age=0`과 동일
    - `no-store` : 캐시하지 않음

# 리퍼러

- 사용자가 어느 경로로 웹사이트에 도달했는지 서버가 파악할 수 있도록 클라이언트가 서버에 보내는 헤더
- RFC 1945 제안 당시 오타로 인하여 `Referer` 로 정의됨, 일부 브라우저 외 `Referrer-Policy` 헤더 사용 가능
- **액세스 출발지가 HTTPS이고, 액세스 목적지가 HTTP인 경우 리퍼러 헤더 전송하지 않음**

# `curl` 주요 옵션

- `-F` : 파일 첨부, 옵션 사용 시 `multipart/form-data`로 지정
- `--compressed` : 콘텐츠 압축
- `-c` : 지정한 파일에 수신한 쿠키 저장
- `-b` : 지정한 파일에서 쿠키 읽어와 전송
- `--digest` : Digest 인증 사용

# QUIZ

[2장. QUIZ](https://www.notion.so/2-QUIZ-9bb7e5092f7744c9936b57316dc79b89?pvs=21)

# 참고 자료

## Content-Type 내 사용 가능한 문자셋

[Character Sets](https://www.iana.org/assignments/character-sets/character-sets.xhtml)
